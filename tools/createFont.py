#!/usr/bin/python
# (c) copyright 2011 by Gerald Wodni

import sys
from PIL import Image

class Transformer:
	def setup( self, imageFile, outputFile ):
		self.loadImage( imageFile )
		self.output = open( outputFile, 'w' )

	def loadImage( self, filename ):
		self.image = Image.open( filename ).convert( 'RGB' )
		(self.width, self.height) = self.image.size
		self.pixels = self.image.load()


class ImageTransformer( Transformer ):
	def __init__( self, imageFile, outputFile ):
		self.setup( imageFile, outputFile )
		self.output.write( "\ created with createImage, do not edit this file, edit the accoring image (" + imageFile + ")\n")
		self.processRows()

	def processRows( self ):
		rowCount = self.height / 8
		colCount = self.width

		self.output.write( "\ size: %dx%d px, that makes %d rows with %d column (=%d bytes)\n" % ( self.width, self.height, rowCount, colCount, rowCount * colCount ) )
		self.output.write( "\ columns, rows\n%d c, %d c,\n" % ( colCount, rowCount ) )

		for row in range( rowCount ):
			self.output.write( "\ row %d\n" % row )
			self.processRow( row )

	def processRow( self, row ):
		for column in range( self.width ):
			byte = self.processColumn( row, column )
			self.output.write( "$%02x c,\n" % byte )

	def processColumn( self, row, column ):
		value = 0
		for y in range( 8 ):
			if y + row * 8 >= self.height:
				break

			color = self.pixels[column, y + row * 8]

			# black / white: shift
			value >>= 1
			if color == ( 0, 0, 0 ):
				value += 0x80

			y += 1

		for i in range( y, 8 ):
			value >>= 1

		return value


class FontTransformer( Transformer ):
	def __init__( self, imageFile, outputFile ):
		self.setup( imageFile, outputFile )
		self.output.write( "\ created with createFont, do not edit this file, edit the accoring image (" + imageFile + ")\n")
		self.processLetterLines()

	def processLetterLines( self ):
		y = 0
		a = 0x20
		while True:
			# break on on the edge of the image
			if y + 1 >= self.height:
				break

			print ">>>>>>>>>>>>>>>>>>>>===", chr(a), "==="
			
			self.processLetterLine( y, a )
			y += 8
			a += 16

	def processLetterLine( self, y, a ):
		x = 0
		i = 0
		while True:
			# break on on the edge of the image
			if x >= self.width:
				break

			if i >= 16:
				break

			print "===", chr(a), "==="
			
			x += self.processLetter( x, y, a )
			x += 1
			a += 1
			i += 1

	def processLetter( self, xOffset, y, a ):
		x = 0
		line = ""
		while True:
			# break on on the edge of the image
			if x >= self.width:
				break

			# break on green
			color = self.pixels[x + xOffset, y]
			if color == ( 0, 255, 0 ):
				break

			letter = self.processLine( x + xOffset, y )
			line += " $%02x c," % letter

			x += 1

		line = "\ '" + chr(a) + "' " + repr(a) + ( " $%02x\n%d c," % ( a, x) ) +  line + "\n\n"

		self.output.write( line )

		return x

	def processLine( self, x, yOffset ):
		value = 0
		y = 0
		while True:
			# break on end of byte
			if y >= 8:
				break

			# break on green
			color = self.pixels[x, y + yOffset]
			if color == ( 0, 255, 0 ):
				break

			# black / white: shift
			value >>= 1
			if color == ( 0, 0, 0 ):
				value += 0x80

			y += 1

		for i in range( y, 8 ):
			value >>= 1

		return value

def usage():
	print "usage: ", sys.argv[0], "{image|font} <image-file> <output-file>"
			

if __name__ == "__main__":
	if len(sys.argv) != 4:
		usage()
	else:
		if sys.argv[1] == "font":
			FontTransformer( sys.argv[2], sys.argv[3] )
		elif sys.argv[1] == "image":
			ImageTransformer( sys.argv[2], sys.argv[3] )
		else:
			usage()

